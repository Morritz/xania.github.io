---
import SkipToContent from './SkipToContent.astro';
import SidebarToggle from './SidebarToggle';
// import Search from './Search.astro';
import ThemeToggleButton from './ThemeToggleButton';
import { getLanguageFromURL } from '../../util';
import { useTranslations } from '../../i18n/util';

const { currentPage } = Astro.props;
const lang = currentPage && getLanguageFromURL(currentPage);
// const docsearchStrings = getDocSearchStrings(Astro);
const t = useTranslations(Astro);
---

<header>
	<SkipToContent />
	<nav class="nav-wrapper" aria-label={t('navbar.a11yTitle')}>
		<div dir="ltr" lang="en" class="logo flex">
			<ul>
				<li>
					<a class="astro" href="https://astro.build/">
						<span class="sr-only">Xania</span>

						<svg viewBox="134 62 167 152" xmlns="http://www.w3.org/2000/svg">
							<rect x="227" y="109" width="70" height="70" style="stroke: none; fill: rgb(70, 100, 160);"></rect>
							<rect x="188" y="164" width="30" height="30" style="fill: white;" ></rect>
							<polygon style="stroke: none; fill: rgb(0, 120, 160);" points="165 79 218 79 218 154 140 154 140 100"></polygon>
						</svg>						

					</a>
				</li>
				<li>
					<a class="docs" href={`/${lang || 'en'}/getting-started/`}>
						<span class="sr-only">Xania</span>
						Xania
					</a>
				</li>
			</ul>
		</div>
		<ThemeToggleButton
			client:visible
			labels={{ useLight: t('themeToggle.useLight'), useDark: t('themeToggle.useDark') }}
			isInsideHeader={true}
		/>
		<!-- <Search {lang} labels={docsearchStrings} /> -->
		<SidebarToggle client:idle />
	</nav>
</header>

<style>
	header {
		position: fixed;
		left: 0;
		top: 0;
		right: 0;
		height: var(--theme-navbar-height);
		z-index: 11;
		padding: 2rem 0;
		background-color: var(--theme-navbar-bg);
		display: flex;
		align-items: center;
		justify-content: left;
		overflow: hidden;
	}

	ul,
	li {
		all: inherit;
		flex-grow: 0;
	}

	.nav-wrapper {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.75rem;
		width: 100%;
		padding-inline: var(--min-spacing-inline);
	}

	/* If the device is likely to show a scrollbar gutter, reserve space for it */
	@media (hover: hover) {
		.nav-wrapper {
			max-width: calc(100vw - 1.1rem);
		}
	}

	.logo {
		display: flex;
		justify-content: flex-start;
		font-size: 1rem;
		flex-grow: 1;
		flex-shrink: 0;
		font-weight: 600;
		line-height: 1;
		text-decoration: none;
		gap: 0.5em;
	}

	:global([dir='rtl']) .logo {
		justify-content: flex-end;
	}

	.logo a {
		padding: 0.5em 0.25em;
		margin: -0.5em -0.25em;
	}

	.logo svg {
		height: 40px;
		width: auto;
		display: block;
		color: var(--theme-accent);
	}

	.logo .hover {
		opacity: 0;
	}
	.logo a {
		transition: transform 180ms ease-out;
	}

	.logo a:hover,
	.logo a:focus {
		opacity: 1;
		transform: translateY(-2px);
	}

	.logo a:focus:not(:focus-visible) {
		outline: none;
	}

	.logo h1 {
		font: inherit;
		color: inherit;
		margin: 0;
	}

	.astro {
		overflow: hidden;
		width: 41px;
	}

	.docs {
		display: none;
		text-decoration: none;
		font-size: 38px;
		font-family: 'Courier New', Courier, monospace;
	}

	.docs:hover {
		text-decoration: none;
	}

	@media (min-width: 20em) {
		.docs {
			display: inherit;
			max-width: 80px;
		}
	}

	@media (min-width: 23.5em) {
		.docs {
			max-width: none;
		}
		.nav-wrapper {
			gap: 1rem;
		}
	}

	@media (min-width: 50em) {
		header {
			padding: 2.5rem 0 1.5rem 0;
		}
		.astro {
			width: auto;
		}
	}

	@media (forced-colors: active) {
		.text {
			fill: LinkText;
		}
		.docs-path {
			fill: ActiveText;
		}
	}
</style>
